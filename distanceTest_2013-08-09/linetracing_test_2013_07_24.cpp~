/*
 *   MINI ROBOT 
 *
 *   robot uart control
 *  
 *
 *	 Modifier	: Kim Moon Ki
 *	 Date		: 2013-07-06 
 *	 Test Name	: Line tracing solo
 */

 
 
#include <stdio.h>
//#include <signal.h>
#include <fcntl.h>
#include <unistd.h>

#include <time.h>
//#include <sys/ioctl.h>
//#include <sys/time.h>
#include <sys/types.h>

// 원본
#include <stdlib.h>
#include <termios.h>
#include <sys/signal.h>
#include <string.h>
#include <pthread.h> 
#include <unistd.h> 

// 카메라 모듈 관련 헤더
#include <pxa_lib.h>
#include <pxa_camera_zl.h>

// 벡터라이즈 헤더
#include "moduls/vectorize.h"


#define BAUDRATE B4800
#define MODEDEVICE "/dev/ttyS2"
using namespace std;

int uart_fd;


int open_serial(void)
{
    char fd_serial[20];
    int fd;
    struct termios oldtio, newtio;

    strcpy(fd_serial, MODEDEVICE); //FFUART
    
    fd = open(fd_serial, O_RDWR | O_NOCTTY );
    if (fd <0) {
        printf("Serial %s  Device Err\n", fd_serial );
        exit(1);
    }
	printf("robot uart ctrl %s\n", MODEDEVICE);
    
    tcgetattr(fd,&oldtio); /* save current port settings */
    bzero(&newtio, sizeof(newtio));
    newtio.c_cflag = BAUDRATE | CS8 | CLOCAL | CREAD;
    newtio.c_iflag = IGNPAR;
    newtio.c_oflag = 0;
    newtio.c_lflag = 0;
    newtio.c_cc[VTIME]    = 0;   /* inter-character timer unused */
    newtio.c_cc[VMIN]     = 1;   /* blocking read until 8 chars received */
    
    tcflush(fd, TCIFLUSH);
    tcsetattr(fd,TCSANOW,&newtio);
    
    return fd;
}

void *write_func(void *) 
{    

	// 카메라 오버레이 관련
	int handle;
	int handle_overlay2;
	struct pxa_video_buf* vidbuf;
	struct pxacam_setting camset;
	struct pxa_video_buf vidbuf_overlay;
	
	//vals
	int command;
	int len;
	vector direction;
	
	//cam init
	handle = camera_open(NULL,0);
	ASSERT(handle);

	memset(&camset,0,sizeof(camset));
	camset.mode = CAM_MODE_VIDEO;
	camset.format = pxavid_ycbcr422;

	camset.width = 320;
	camset.height = 240;

	camera_config(handle,&camset);

	camera_start(handle);

	handle_overlay2 = overlay2_open(NULL,pxavid_ycbcr422,NULL, 320, 240, 0 , 0);

	overlay2_getbuf(handle_overlay2,&vidbuf_overlay);
	len = vidbuf_overlay.width*vidbuf_overlay.height;
	//cam init end
	
	//init move
	command = 5;
	write(uart_fd,&command,1);
	
	while(1){
		//get frame from cam
		vidbuf = camera_get_frame(handle);

		//copy frame to var
		memcpy(vidbuf_overlay.ycbcr.y,vidbuf->ycbcr.y,len);
		memcpy(vidbuf_overlay.ycbcr.cb,vidbuf->ycbcr.cb,len/2);
		memcpy(vidbuf_overlay.ycbcr.cr,vidbuf->ycbcr.cr,len/2);
		command = vectorize(&vidbuf_overlay, &direction);

		//send to backboard
		write(uart_fd,&command,1);

		//not only print to lcd
		//it also clean buffer!!!!!!!!!!!!
		//so it must not skip!!!!!!!!!!!!!
		camera_release_frame(handle,vidbuf);
	}	
	
	//end cam
	camera_stop(handle);
	camera_close(handle);
	
	//////////////////////////////////////////////////

/*
	char s[2+1];
	int write_buf;

	while(1)     
	{         
		fgets(s, sizeof(s), stdin);
		strchr(s, '\n');
		write_buf = atoi(s);

		if( write_buf != 0 )
		{
			printf("Embedded->Robot [%d]\n", write_buf);
			write(uart_fd, &write_buf, 1 );
		}
	} 
*/
}  

void *read_func(void *) 
{     
    char read_buf;
 
	while(1)     
	{         
        read(uart_fd, &read_buf, 1);

        if( read_buf != 0 )
			printf("Robot->Embedded [%d]\n", read_buf);
	} 
}  

int main(int argc, char* argv[])
{
    int write_buf;
    char read_buf;

    int thr_id1;
    int thr_id2;
    int status;
    pthread_t p_thread[2];
	
    uart_fd = open_serial();

	thr_id1 = pthread_create(&p_thread[0], NULL, write_func, (void *)NULL);     
	if (thr_id1 < 0)     
	{    
		perror("thread1 create error : ");  
		exit(0);    
	}      

	thr_id2 = pthread_create(&p_thread[1], NULL, read_func, (void *)NULL);  
	if (thr_id2 < 0)  
	{    
		perror("thread2 create error : ");  
		exit(0);  
	}


	usleep(1000000);	// delay 5sec


	pthread_join(p_thread[0], (void **)&status);   
	pthread_join(p_thread[1], (void **)&status);     
	return 0;
}  

